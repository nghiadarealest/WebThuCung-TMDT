@{
    ViewData["Title"] = ViewData["Title"] ?? "Danh mục sản phẩm";
}
  	<link rel="stylesheet"  href="/css/category.css" />
<div class= "category">
<div class="banner-slider">
			<div class="slides">
				<div class="slide"><img src="/images/slide1.png" alt="Slide 1"></div>
				<div class="slide"><img src="/images/slide2.jpg" alt="Slide 2"></div>
				<div class="slide"><img src="/images/slide3.png" alt="Slide 3"></div>
				<div class="slide"><img src="/images/slide4.png" alt="Slide 4"></div>
				<div class="slide"><img src="/images/slide5.png" alt="Slide 5"></div>
			</div>
			<div class="dots"></div>
			<script src="/js/bannerSlider.js"></script>
		</div>
</div>
<div class="main" style="margin: 0px 125px">
    <!-- Bộ lọc và sắp xếp -->
    <div class="filters" style="display: flex; justify-content: space-between; margin-bottom: 20px;">
        <div class="filter-options" style="align-items: center; display: flex; gap: 20px;">
            <!-- Bộ lọc -->
            <div id="filter" class="filter-button" style="padding: 8px 16px; background-color: #f0f0f0; cursor: pointer; border-radius: 5px;">
                Bộ lọc
            </div>

            <!-- Sắp xếp -->
            <div id="sort" class="filter-button" style="padding: 8px 16px; background-color: #f0f0f0; cursor: pointer; border-radius: 5px;">
                Sắp xếp
            </div>
			@* <div>@ViewData["Title"]</div> *@
        </div>
    </div>

    <!-- Danh sách sản phẩm -->
    <div class="product-list" id="product-list" style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 20px;">
        <!-- Các sản phẩm sẽ được hiển thị tại đây -->
    </div>

    <!-- Phân trang -->
    <div class="pagination" id="pagination" style="text-align: center; margin-top: 20px;">
        <!-- Các nút phân trang sẽ được thêm vào đây -->
    </div>

</div>
<!-- Script giả lập dữ liệu và phân trang -->
<script>
    const productsPerPage = 20; // Số sản phẩm trên mỗi trang
    let currentPage = 1;
    let fakeProducts;
    let categoryId =  localStorage.getItem('categoryId'); 

    const addCart = async (productId) => {
        let userId = localStorage.getItem('id');
        
        let a =await fetch(`https://localhost:5003/api/cart`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                UserId: userId,
                ProductId: productId,
                Quantity: 1
            })
        });

        let res =await a.json();
        if(res.status == 200) {
            alert('Thêm vào giỏ hàng thành công');
        } else {
            alert('Thêm vào giỏ hàng thất bại');
        }
    }

    const fetchProducts = async () => {
        try {
            // Gửi yêu cầu HTTP POST đến API login
            const response = await fetch(`https://localhost:5003/api/products/byCate?id=${categoryId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            console.log("response", response);

            // Xử lý phản hồi từ API
            if (response.ok) {
                 let res = await response.json();
                fakeProducts = res?.data;
                renderProducts(fakeProducts);
            } else {
                console.log("Không tìm thấy sản phầm")
            }
        } catch (error) {
            console.error('Lỗi khi gọi API:', error);
            alert('Đã xảy ra lỗi khi gọi API. Vui lòng thử lại sau.');
        }

  
    }

    fetchProducts()
    //   Tạo mảng dữ liệu giả động với thông tin sản phẩm
    //  fakeProducts = Array.from({ length: 200 }, (_, index) => {
    //     const id = index + 1;
    //     return {
    //         ProductId: id,
    //         ProductName: `Sản phẩm ${id}`,
    //         ImageUrl: `https://via.placeholder.com/280x200?text=Product+1`,
    //         Price: id * 100000,
    //         OriginalPrice: id * 150000,
    //         Slug: `product-${id}`
    //     };
    // });



    // Hàm định dạng giá với dấu chấm giữa các số
    function formatPrice(price) {
        return price.toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ".");
    }

    // Hàm render các sản phẩm
function renderProducts(products) {
    const productListElement = document.getElementById('product-list');
    productListElement.innerHTML = ''; // Clear previous products

    products.forEach(product => {
        const productBox = document.createElement('div');
        productBox.classList.add('product_box_content');
        productBox.setAttribute('data-id', product.ProductId);
        productBox.style = 'border: 1px solid #ddd; padding: 20px; border-radius: 10px; background-color: #fff; position: relative;';

        const productLink = document.createElement('a');
        productLink.href = `/Home/ProductDetail`;
        productLink.style = 'display: block; text-align: center;';

        const imageWrapper = document.createElement('div');
        imageWrapper.classList.add('wrapper_image_feature');
        const productImage = document.createElement('img');
        productImage.src = product.ImageUrl;
        productImage.alt = product.ProductName;
        productImage.style = 'width: 100%;height: 300px;border-radius: 10px;object-fit: cover;';

        imageWrapper.appendChild(productImage);

        productLink.appendChild(imageWrapper);

        const productText = document.createElement('div');
        productText.classList.add('product_box_content_text');
        productText.style = 'text-decoration: none; color: #333; display: block; text-align: left; margin-top: 20px;';

        const productName = document.createElement('h3');
        productName.classList.add('product_name');
        productName.style = 'font-size: 16px; font-weight: 400;';
        productName.textContent = product.ProductName;
        productText.appendChild(productName);

        let price = product?.Price;
        let priceDiscount = product?.Price - (product.Price * product?.DiscountPercent / 100);


        const productPrice = document.createElement('p');
        const originalPrice = document.createElement('span');

        if(priceDiscount) {
            productPrice.classList.add('product_price');
            productPrice.style = 'font-size: 16px; margin: 5px 0;';
            productPrice.innerHTML = `<span class="woocommerce-Price-amount amount"><bdi>${formatPrice(priceDiscount*1000)}&nbsp;<span class="woocommerce-Price-currencySymbol">₫</span></bdi></span>`;

            originalPrice.classList.add('product_regular_price');
            originalPrice.style = 'text-decoration-thickness: 0px; color: #999; margin-left: 10px; font-weight: 300';
            originalPrice.innerHTML = `<span class="woocommerce-Price-amount amount"><bdi>${formatPrice(price*1000)}&nbsp;<span class="woocommerce-Price-currencySymbol">₫</span></bdi></span>`;
            productPrice.appendChild(originalPrice);
        }else {
            productPrice.classList.add('product_price');
            productPrice.style = 'font-size: 16px; margin: 5px 0;';
            productPrice.innerHTML = `<span class="woocommerce-Price-amount amount"><bdi>${formatPrice(price*1000)}&nbsp;<span class="woocommerce-Price-currencySymbol">₫</span></bdi></span>`;

        }

        productText.appendChild(productPrice);
        productLink.appendChild(productText);

        // Icon yêu thích
const iconFavorite = document.createElement('div');
iconFavorite.classList.add('icon_favorite');
iconFavorite.style = 'position: absolute; top: 10px; right: 10px; cursor: pointer;';

const heartIcon = document.createElement('i');
heartIcon.classList.add('far', 'fa-heart'); // Trái tim rỗng
heartIcon.style = `
    font-size: 24px;
    color: pink;
    transition: transform 0.2s ease, color 0.5s ease; /* Thêm hiệu ứng chuyển đổi màu */
`;

// Thêm sự kiện click cho icon yêu thích
heartIcon.onclick = () => {
    heartIcon.style.transform = 'scale(1.2)'; // Phóng to nhẹ khi click
    setTimeout(() => (heartIcon.style.transform = 'scale(1)'), 200); // Trả về kích thước ban đầu

    if (heartIcon.classList.contains('far')) {
        heartIcon.classList.remove('far');
        heartIcon.classList.add('fas'); // Đổi thành trái tim đầy
        heartIcon.style.color = 'red'; // Chuyển màu từ hồng sang đỏ
    } else {
        heartIcon.classList.remove('fas');
        heartIcon.classList.add('far'); // Quay lại trái tim rỗng
        heartIcon.style.color = 'pink'; // Chuyển màu từ đỏ sang hồng
    }
};

iconFavorite.appendChild(heartIcon);

// Icon giỏ hàng
const iconCart = document.createElement('div');
iconCart.classList.add('icon_cart');
iconCart.style = 'position: absolute; top: 10px; left: 10px; cursor: pointer;';

const cartIcon = document.createElement('i');
cartIcon.classList.add('fas', 'fa-cart-arrow-down'); // Giỏ hàng đầy ban đầu (fa-cart-arrow-down)
cartIcon.style = `
    font-size: 24px;
    color: pink;
    transition: transform 0.2s ease, color 0.5s ease; /* Thêm hiệu ứng chuyển đổi màu */
`;

// Thêm sự kiện click cho icon giỏ hàng
cartIcon.onclick = () => {
    addCart(product?.ProductId)
    cartIcon.style.transform = 'scale(1.2)'; // Phóng to nhẹ khi click
    setTimeout(() => (cartIcon.style.transform = 'scale(1)'), 200); // Trả về kích thước ban đầu

    if (cartIcon.classList.contains('fa-cart-arrow-down')) {
        cartIcon.classList.remove('fa-cart-arrow-down');
        cartIcon.classList.add('fa-shopping-cart'); // Chuyển sang giỏ hàng đầy (fa-shopping-cart)
        cartIcon.style.color = 'red'; // Chuyển màu từ hồng sang đỏ
    } else {
        cartIcon.classList.remove('fa-shopping-cart');
        cartIcon.classList.add('fa-cart-arrow-down'); // Quay lại giỏ hàng xuống (fa-cart-arrow-down)
        cartIcon.style.color = 'pink'; // Chuyển màu từ đỏ sang hồng
    }
};

iconCart.appendChild(cartIcon);

// Thêm các icon vào DOM (có thể thêm vào một container hoặc phần cụ thể của giao diện)
document.body.appendChild(iconFavorite);
document.body.appendChild(iconCart);


        // Thêm icon vào sản phẩm
        productBox.appendChild(productLink);
        productBox.appendChild(iconFavorite);
        productBox.appendChild(iconCart);
        productListElement.appendChild(productBox);

        // Thêm sự kiện hover vào sản phẩm
        productBox.addEventListener('mouseenter', () => {
            iconFavorite.style.opacity = 1; // Hiển thị icon yêu thích
            iconCart.style.opacity = 1;    // Hiển thị icon giỏ hàng
        });

        productBox.addEventListener('mouseleave', () => {
            iconFavorite.style.opacity = 0; // Ẩn icon yêu thích
            iconCart.style.opacity = 0;     // Ẩn icon giỏ hàng
        });

        productBox.addEventListener('click', (e) => {
            localStorage.setItem('productId', product.ProductId);
        });
    });
}


    function renderPagination(totalPages) {
        const paginationElement = document.getElementById('pagination');
        paginationElement.innerHTML = ''; // Clear previous pagination

        for (let i = 1; i <= totalPages; i++) {
            const pageButton = document.createElement('button');
            pageButton.textContent = i;

            // Nếu là trang hiện tại thì thêm lớp active
            if (i === currentPage) {
                pageButton.classList.add('active');
            }

            // Khi nhấn vào một trang, cập nhật trang hiện tại
            pageButton.onclick = () => {
                currentPage = i;
                updatePage();  // Cập nhật trang
            };

            paginationElement.appendChild(pageButton);
        }
    }

    // Cập nhật trang
    function updatePage() {
        const start = (currentPage - 1) * productsPerPage;
        const end = start + productsPerPage;
        const productsToDisplay = fakeProducts.slice(start, end);
        renderProducts(productsToDisplay);

        const totalPages = Math.ceil(fakeProducts.length / productsPerPage);
        renderPagination(totalPages);
    }

    // Gọi hàm updatePage khi trang được tải
    @* window.onload = updatePage; *@
</script>


<div class="coTheBanSeThich">
			<div class="coTheBanSeThich-header">
				<div class="coTheBanSeThich-tieuDe">Có thể bạn sẽ thích</div>
				<div class="coTheBanSeThich-xemThem">Xem thêm &gt;</div>
			</div>
			<div class="coTheBanSeThich-content">
				<button class="btn-prev" onclick="slideLeft()">&#8249;</button>
				<div class="coTheBanSeThich-slider" id="slider">
					<img class="coTheBanSeThich-item" src="/images/suggest1.png" alt="Ảnh 1">
					<img class="coTheBanSeThich-item" src="/images/suggest2.jpg" alt="Ảnh 2">
					<img class="coTheBanSeThich-item" src="/images/suggest3.jpg" alt="Ảnh 3">
					<img class="coTheBanSeThich-item" src="/images/suggest4.jpeg" alt="Ảnh 4">
					<img class="coTheBanSeThich-item" src="/images/suggest5.jpg" alt="Ảnh 5">
					<img class="coTheBanSeThich-item" src="/images/suggest6.jpg" alt="Ảnh 6">
					<img class="coTheBanSeThich-item" src="/images/suggest7.jpg" alt="Ảnh 7">

				</div>
				<button class="btn-next" onclick="slideRight()">&#8250;</button>
			</div>
			<script src="/js/suggest.js"></script>
		</div>
		<div class="nhanTuVan">	
			<div class="nhanTuVan-tieuDe">Nhận tư vấn từ HanDK</div>
			<div class="nhanTuVan-moTa">Đăng ký ngay bên dưới để nhận được sự hỗ trợ từ chúng tôi.</div>
			<span class="material-icons nhanTuVan-icon" style="font-size: 60px;">group</span> <!-- Trợ giúp -->
			<div class="nhanTuVan-hoVaTen">
				<label for="hoVaTen"></label>
				<input type="text" id="hoVaTen" placeholder="Họ và tên" />
			</div>
			<div class="nhanTuVan-sdt">
				<label for="sdt"></label>
				<input type="text" id="sdt" placeholder="Số điện thoại" />
			</div>
			<div class="nhanTuVan-tinhThanh">
				<label for="tinhThanh"></label>
				<select id="tinhThanh">
					<option value="" disabled selected>Chọn tỉnh thành</option>
				</select>
			</div>
			<script src="~/js/tinhThanh.js"></script>
		<button class="nhanTuVan-submit">Nhận tư vấn</button>
		<script src="/js/nhanTuVan.js"></script>
		</div>
        </div>